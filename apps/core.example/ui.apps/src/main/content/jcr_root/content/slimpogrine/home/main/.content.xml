<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:nt="http://www.jcp.org/jcr/nt/1.0" xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
    jcr:primaryType="nt:unstructured">
    <explanation
        jcr:primaryType="nt:unstructured"
        sling:resourceType="slimpogrine/components/main/explanation"
        headline="So What is SliMpoGrine?"
        text="&lt;p>SliMpoGrine is trying to make a case for developing Sling-based web-applications. At first was the silly idea of combining two CMS into one docker image. Out of the initial &lt;a href=&quot;https://github.com/apache/sling-project-archetype&quot; target=&quot;_blank&quot;>project archetype&lt;/a> fell an example app. Making that a CSS Zen Garden is a cheap trick to get it visually appealing too, something the Sling project is traditionally bad at :-)&lt;/p> &lt;p>Also some lessons can be taken about creating a Sling application from scatch: Importing existing markup as Sightly script (aka &lt;a href=&quot;https://github.com/adobe/htl-spec&quot; target=&quot;_blank&quot;>HTL&lt;/a>), split it up into includes and components, copy over the CSS, separate markup from text while understanding that it's still all content from Sling's perspective. There is just one &quot;business&quot; &lt;a href=&quot;https://sling.apache.org/documentation/bundles/models.html&quot; target=&quot;_blank&quot;>Sling-Model&lt;/a>, the CSS-Picker.&lt;/p>"/>
    <participation
        jcr:primaryType="nt:unstructured"
        sling:resourceType="slimpogrine/components/main/participation"
        headline="SliMpoGrine Participants"
        text="&lt;p>The participating CMS's are &lt;a href=&quot;https://www.composum.com&quot; target=&quot;_blank&quot;>Composum's&lt;/a> Pages+Assets and &lt;a href=&quot;https://www.peregrine-cms.com&quot; target=&quot;_blank&quot;>Peregrine-CMS&lt;/a>. The idea is to use them and write how we got here. Despite Sling being around for a long time, it's use within the open-source realm is limited. Developing on top of it is arguably &quot;Fun and Simple&quot;, hard parts are start and finish.&lt;/p> &lt;p>Starting means leaning about the stack: Why do I want my web-content saved in a JCR tree-structure, how everything comes together in OSGi, setup your own project, deploy content-packages, user-manager ...&lt;/p> &lt;p>Finishing means how to deploy Sling as a docker container on a low-cost server, including a webserver in front that does some caching. So the idea is to provide tips+tricks, the paths '/content/slimpogrine' (what you're reading here), &lt;a href=&quot;https://slimpo.motorbrot.org/&quot; title=&quot;View the Composum-Pages site&quot;>'/content/sites/slimpo'&lt;/a> and &lt;a href=&quot;https://sligrine.motorbrot.org/&quot; title=&quot;View the Peregrine site&quot;>'/content/sligrine'&lt;/a> are synched back into packages and part of a &lt;a href=&quot;https://hub.docker.com/r/orx0815dockerhub/slimpogrine&quot; target=&quot;_blank&quot;>self-explaining docker-image&lt;/a>. &lt;a href=&quot;https://github.com/orx0815/slimpogrine&quot; target=&quot;_blank&quot;>PRs welcomed.&lt;/a>&lt;/p>"/>
    <benefits
        jcr:primaryType="nt:unstructured"
        sling:resourceType="slimpogrine/components/main/benefits"
        headline="SliMpoGrine Benefits"
        text="&lt;p>This is not software on it's own but a combination of open-source software using the &lt;a href=&quot;https://github.com/apache/sling-slingfeature-maven-plugin&quot; target=&quot;_blank&quot;>OSGi Feature Maven Plugin&lt;/a>. The &lt;a href=&quot;https://github.com/apache/sling-org-apache-sling-starter&quot; target=&quot;_blank&quot;>Sling Starter&lt;/a> already comes with applications on top, &lt;a href=&quot;https://www.ist-software.com&quot; target=&quot;_blank&quot;>developed by IST&lt;/a>, a Node-Browser (think crx/de), User- and Package-Manager. SliMpoGrine basically adds two CMS. Because you can.&lt;/p>"/>
    <requirements
        jcr:primaryType="nt:unstructured"
        sling:resourceType="slimpogrine/components/main/requirements"
        headline="SliMpoGrine Requirements"
        text="&lt;p>Required is a general interest in Java middle-ware. And some knowledge in AEM-development probably, at least till this documentation project has progressed. There are several approaches to achieve the same. The 'traditional' on-premise style of just starting the &lt;a href=&quot;https://hub.docker.com/r/apache/sling&quot; target=&quot;_blank&quot;>Apache Sling Docker Image&lt;/a> and installing own code with the Package-Manager.&lt;/p> &lt;p>But in order to play around with the feature-model, the first approach was to fork the Sling-Starter and add stuff. But when looking at the archetype on how to create close-sourced apps on top, I figured out the starter project publishes a new artifact TYPE 'slingosgifeature' to maven-central. That can be imported into your own feature-model. So you have a starting point that actually boots and spins up a JCR-repository, OSGi container, Jetty and everything else. Likewise you could import the slingosgifeature of this silly project.&lt;/p> &lt;p>That's also not a sane idea, but it somehow shows the power behind the concept of feature-models. (Which are basically units of bundles+content-packages+configs+repoint-scripts, to be explained later in one of the CMS hopefully).&lt;/p> &lt;p>Another approach would be to use the Sling docker image as a base-layer in your own Dockerfile plus some maven magic or curl-commands to install own code on top. That is probably a reasonable approach  - but not used here.&lt;/p> &lt;p role=&quot;contentinfo&quot;>Space in CSS ran out. Inspired by the work of Dan Klco on &lt;a href=&quot;https://github.com/apache/sling-org-apache-sling-app-cms&quot; target=&quot;_blank&quot;>Sling-CMS&lt;/a> (another one!) and Robert Munteanu's &lt;a href=&quot;https://github.com/rombert/pospai&quot; target=&quot;_blank&quot;>Kubernetes deploment&lt;/a>.&lt;/p>"/>
</jcr:root>
